Module Mixing Time
==================

Functions
---------


`dPlans(g, n, plan={}, plans=[], counter=0)`
:   Takes in a graph g, and an int n, where n is the number of districts you want all your plans to have and returns all districting plans
    n must be >= 2


`distPlans(g, n)`
:


`distsInComm(plan1, plan2)`
:   Takes in two districting plans (dictionaries) and returns a list of tuples of the districts in common


`multiplier(g, finalPlan)`
:   Calculates how many different sequences exist that will get you from one plan to another
    graph input will always be 2 districts and have all districts that were in common removed
    finalPlan is a dictionary


`pos(g)`
:   pos takes in a graph and returns dictionary
    of positions for nodes


`probTransition(g, p1, p2)`
:   probTransition takes in a graph (g) and two districting plans (dictionaries),
    p1 and p2 from the same graph and returns the probability of transitioning
    from p1 to p2 (number in between 0 and 1)


`randomPlanar(x)`
:   Will return a random planar nx graph with x nodes that was created using delaunay triangulation


`single_steps(g, n, x)`
:   Takes in a graph g and returns the stationary distribution of all the n-district plans from g


`spanning_tree(newGraph)`
:   Takes in a graph and will return the number of spanning trees in the graph


`squared_steps(g, n, x)`
:   Takes in a graph g and number of districts; each step x squares the transition matrix


`stationaryDist(g, n)`
:   stationaryDist calculates the stationary distribution for ergodic graphs
    inputs: g (graph), n (integer) or the number of districts in a plan


`total_variation_distance(array1, array2)`
:   takes in the stationary distributuon (array1) and a step of Recomb (array 2) and returns the TVD


`transitionMatrix(g, n)`
:   transitionMatrix takes in a graph and returns a transition matrix
    where each (i,j) entry is the probability of transitioning from the ith districting plan
    to the jth districting plan and n is number of districts